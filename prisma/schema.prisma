generator client {
  provider                       = "prisma-client-js"
  previewFeatures                = ["prismaSchemaFolder"]
  interactiveTransactionsTimeout = 10000
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  fullName    String?       @map("full_name")
  email       String        @unique
  password    String
  city        String?
  country     String?
  pictures    String?
  phoneNumber String?       @map("phone_number")
  cart        Cart?
  role        Role          @default(USER)
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  transaction Transaction[]

  @@map("user")
}

model Product {
  id              Int                 @id @default(autoincrement())
  title           String
  bestSeller      Int?                @default(0) @map("best_seller")
  categoryId      Int
  colorId         Int                 @map("color_id")
  discount        Int?                @default(0)
  colors          ProductItemColors[]
  memory          ProductItemMemory[]
  category        Category            @relation(fields: [categoryId], references: [id])
  productItemInfo ProductItemInfo[]   @relation(map: "product_item_info")
  defaultImage    String              @map("default_image")
  createdAt       DateTime?           @default(now()) @map("created_at")
  updatedAt       DateTime?           @updatedAt @map("updated_at")

  @@map("product")
}

model ProductItemInfo {
  id               Int                 @id @default(autoincrement())
  screenSize       String?             @map("screen_size")
  CPU              String?             @map("cpu")
  cores            Int?
  mainCamera       String?             @map("main_camera")
  frontCamera      String?             @map("front_camera")
  battery          Int?
  screenTypeId     Int
  screenType       ScreenType          @relation(fields: [screenTypeId], references: [id], map: "screen_type")
  brand            Brand               @relation(fields: [brandId], references: [id])
  product          Product             @relation(fields: [productId], references: [id])
  colors           ProductItemColors[]
  memory           ProductItemMemory[]
  imagesUrl        ProductItemImages[]
  cartItem         CartItem[]          @relation(map: "cart_item")
  brandId          Int                 @map("brand_id")
  productId        Int                 @map("product_id")
  price            Int
  description      String?
  screenResolution String?             @map("screen_resolution")
  createdAt        DateTime?           @default(now()) @map("created_at")
  updatedAt        DateTime?           @updatedAt @map("updated_at")

  @@map("product_item_info")
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String
  product   Product[]
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("category")
}

model ProductItemMemory {
  id              Int               @id @default(autoincrement())
  title           String
  price           Int
  productItemInfo ProductItemInfo[] @relation(map: "product_item_info")
  product         Product[]
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")

  @@map("product_item_memory")
}

model ProductItemColors {
  id              Int               @id @default(autoincrement())
  color           String
  productItemInfo ProductItemInfo[] @relation(map: "product_item_info")
  product         Product[]
  title           String
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")

  @@map("product_item_colors")
}

model Brand {
  id              Int               @id @default(autoincrement())
  productItemInfo ProductItemInfo[] @relation(map: "product_item_info")
  title           String
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")

  @@map("brand")
}

model ProductItemImages {
  id        Int               @id @default(autoincrement())
  product   ProductItemInfo[]
  imgUrl    String[]          @map("img_url")
  createdAt DateTime?         @default(now()) @map("created_at")
  updatedAt DateTime?         @updatedAt @map("updated_at")

  @@map("product_item_images")
}

model Cart {
  id        String     @id @default(cuid())
  total     Int        @default(0)
  userId    String?    @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[] @relation(map: "cart_items")
  createdAt DateTime?  @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")

  @@map("cart")
}

model CartItem {
  id                String          @id @default(cuid())
  quantity          Int
  productItemInfoId Int             @map("product_item_info_id")
  productItemInfo   ProductItemInfo @relation(fields: [productItemInfoId], references: [id], map: "product_item")
  cart              Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId            String
  createdAt         DateTime?       @default(now()) @map("created_at")
  updatedAt         DateTime?       @updatedAt @map("updated_at")

  @@map("cart_item")
}

model Transaction {
  id               String          @id @default(cuid())
  user             User            @relation(fields: [userId], references: [id])
  shipmentMethod   ShipmentMethod? @relation(fields: [shipmentMethodId], references: [id])
  shipmentMethodId Int?
  city             String?
  country          String?
  street           String?
  status           Status
  phoneNumber      String?         @map("phone_number")
  userId           String
  paymentId        String?         @map("payment_id")
  updatedAt        DateTime?       @updatedAt @map("updated_at")
  createdAt        DateTime?       @default(now()) @map("created_at")
}

model ShipmentMethod {
  id          Int           @id @default(autoincrement())
  title       String
  transaction Transaction[]
  description String
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")

  @@map("shipment_method")
}

model ScreenType {
  id              Int               @id @default(autoincrement())
  title           String
  productItemInfo ProductItemInfo[]
  createdAt       DateTime?         @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
}

enum Status {
  PENDING
  SUCCESS
  ERROR
}

enum Role {
  ADMIN
  USER
}
